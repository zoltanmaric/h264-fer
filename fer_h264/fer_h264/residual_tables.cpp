#include "residual_tables.h"
#include "rawreader.h"

int levelcode_to_outputstream[MAX_LEVELCODE_VALUE][7][4];
int inputstream_to_levelcode[16][7][MAX_SUFFIX_VALUE];

struct cavlc_table *CoeffTokenCodeTable[4];
struct cavlc_table *CoeffTokenCodeTable_ChromaDC;
struct cavlc_table *TotalZerosCodeTable_4x4[15];
struct cavlc_table *TotalZerosCodeTable_ChromaDC[3];
struct cavlc_table *RunBeforeCodeTable[6];

int RunBeforeCodeTableCoder_length[6][7]={
{ { 1 },{ 1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 }},
{ { 1 },{ 2 },{ 2 },{ -1 },{ -1 },{ -1 },{ -1 }},
{ { 2 },{ 2 },{ 2 },{ 2 },{ -1 },{ -1 },{ -1 }},
{ { 2 },{ 2 },{ 2 },{ 3 },{ 3 },{ -1 },{ -1 }},
{ { 2 },{ 2 },{ 3 },{ 3 },{ 3 },{ 3 },{ -1 }},
{ { 2 },{ 3 },{ 3 },{ 3 },{ 3 },{ 3 },{ 3 }}
};
unsigned char RunBeforeCodeTableCoder_data[6][7][4]={
{ { 128, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 128, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 192, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 192, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 192, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 96, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 192, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 96, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 160, 0, 0, 0 } ,{ 128, 0, 0, 0 } }
};
int TotalZerosCodeTableCoder_ChromaDC_length[3][4]={
{ { 1 },{ 2 },{ 3 },{ 3 }},
{ { 1 },{ 2 },{ 2 },{ -1 }},
{ { 1 },{ 1 },{ -1 },{ -1 }}
};
unsigned char TotalZerosCodeTableCoder_ChromaDC_data[3][4][4]={
{ { 128, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 128, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 128, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } }
};
int TotalZerosCodeTableCoder_4x4_length[15][16]={
{ { 1 },{ 3 },{ 3 },{ 4 },{ 4 },{ 5 },{ 5 },{ 6 },{ 6 },{ 7 },{ 7 },{ 8 },{ 8 },{ 9 },{ 9 },{ 9 }},
{ { 3 },{ 3 },{ 3 },{ 3 },{ 3 },{ 4 },{ 4 },{ 4 },{ 4 },{ 5 },{ 5 },{ 6 },{ 6 },{ 6 },{ 6 },{ -1 }},
{ { 4 },{ 3 },{ 3 },{ 3 },{ 4 },{ 4 },{ 3 },{ 3 },{ 4 },{ 5 },{ 5 },{ 6 },{ 5 },{ 6 },{ -1 },{ -1 }},
{ { 5 },{ 3 },{ 4 },{ 4 },{ 3 },{ 3 },{ 3 },{ 4 },{ 3 },{ 4 },{ 5 },{ 5 },{ 5 },{ -1 },{ -1 },{ -1 }},
{ { 4 },{ 4 },{ 4 },{ 3 },{ 3 },{ 3 },{ 3 },{ 3 },{ 4 },{ 5 },{ 4 },{ 5 },{ -1 },{ -1 },{ -1 },{ -1 }},
{ { 6 },{ 5 },{ 3 },{ 3 },{ 3 },{ 3 },{ 3 },{ 3 },{ 4 },{ 3 },{ 6 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 }},
{ { 6 },{ 5 },{ 3 },{ 3 },{ 3 },{ 2 },{ 3 },{ 4 },{ 3 },{ 6 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 }},
{ { 6 },{ 4 },{ 5 },{ 3 },{ 2 },{ 2 },{ 3 },{ 3 },{ 6 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 }},
{ { 6 },{ 6 },{ 4 },{ 2 },{ 2 },{ 3 },{ 2 },{ 5 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 }},
{ { 5 },{ 5 },{ 3 },{ 2 },{ 2 },{ 2 },{ 4 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 }},
{ { 4 },{ 4 },{ 3 },{ 3 },{ 1 },{ 3 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 }},
{ { 4 },{ 4 },{ 2 },{ 1 },{ 3 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 }},
{ { 3 },{ 3 },{ 1 },{ 2 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 }},
{ { 2 },{ 2 },{ 1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 }},
{ { 1 },{ 1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 },{ -1 }}
};
unsigned char TotalZerosCodeTableCoder_4x4_data[15][16][4]={
{ { 128, 0, 0, 0 } ,{ 96, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 48, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 24, 0, 0, 0 } ,{ 16, 0, 0, 0 } ,{ 12, 0, 0, 0 } ,{ 8, 0, 0, 0 } ,{ 6, 0, 0, 0 } ,{ 4, 0, 0, 0 } ,{ 3, 0, 0, 0 } ,{ 2, 0, 0, 0 } ,{ 1, 128, 0, 0 } ,{ 1, 0, 0, 0 } ,{ 0, 128, 0, 0 } },
{ { 224, 0, 0, 0 } ,{ 192, 0, 0, 0 } ,{ 160, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 96, 0, 0, 0 } ,{ 80, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 48, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 24, 0, 0, 0 } ,{ 16, 0, 0, 0 } ,{ 12, 0, 0, 0 } ,{ 8, 0, 0, 0 } ,{ 4, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 80, 0, 0, 0 } ,{ 224, 0, 0, 0 } ,{ 192, 0, 0, 0 } ,{ 160, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 48, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 96, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 24, 0, 0, 0 } ,{ 16, 0, 0, 0 } ,{ 4, 0, 0, 0 } ,{ 8, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 24, 0, 0, 0 } ,{ 224, 0, 0, 0 } ,{ 80, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 192, 0, 0, 0 } ,{ 160, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 48, 0, 0, 0 } ,{ 96, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 16, 0, 0, 0 } ,{ 8, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 80, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 48, 0, 0, 0 } ,{ 224, 0, 0, 0 } ,{ 192, 0, 0, 0 } ,{ 160, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 96, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 8, 0, 0, 0 } ,{ 16, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 4, 0, 0, 0 } ,{ 8, 0, 0, 0 } ,{ 224, 0, 0, 0 } ,{ 192, 0, 0, 0 } ,{ 160, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 96, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 16, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 4, 0, 0, 0 } ,{ 8, 0, 0, 0 } ,{ 160, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 96, 0, 0, 0 } ,{ 192, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 16, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 4, 0, 0, 0 } ,{ 16, 0, 0, 0 } ,{ 8, 0, 0, 0 } ,{ 96, 0, 0, 0 } ,{ 192, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 4, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 16, 0, 0, 0 } ,{ 192, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 8, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 8, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 192, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 16, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 16, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 96, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 16, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } }
};
int CoeffTokenCodeTableCoder_ChromaDC_length[17][4]={
{ { 2 },{ -1 },{ -1 },{ -1 }},
{ { 6 },{ 1 },{ -1 },{ -1 }},
{ { 6 },{ 6 },{ 3 },{ -1 }},
{ { 6 },{ 7 },{ 7 },{ 6 }},
{ { 6 },{ 8 },{ 8 },{ 7 }},
{ { -1 },{ -1 },{ -1 },{ -1 }},
{ { -1 },{ -1 },{ -1 },{ -1 }},
{ { -1 },{ -1 },{ -1 },{ -1 }},
{ { -1 },{ -1 },{ -1 },{ -1 }},
{ { -1 },{ -1 },{ -1 },{ -1 }},
{ { -1 },{ -1 },{ -1 },{ -1 }},
{ { -1 },{ -1 },{ -1 },{ -1 }},
{ { -1 },{ -1 },{ -1 },{ -1 }},
{ { -1 },{ -1 },{ -1 },{ -1 }},
{ { -1 },{ -1 },{ -1 },{ -1 }},
{ { -1 },{ -1 },{ -1 },{ -1 }},
{ { -1 },{ -1 },{ -1 },{ -1 }}
};
unsigned char CoeffTokenCodeTableCoder_ChromaDC_data[17][4][4]={
{ { 64, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 28, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 16, 0, 0, 0 } ,{ 24, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 12, 0, 0, 0 } ,{ 6, 0, 0, 0 } ,{ 4, 0, 0, 0 } ,{ 20, 0, 0, 0 } },
{ { 8, 0, 0, 0 } ,{ 3, 0, 0, 0 } ,{ 2, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } }
};
int CoeffTokenCodesCoder_nC_8_to_max_length[17][4]={
{ { 6 },{ -1 },{ -1 },{ -1 }},
{ { 6 },{ 6 },{ -1 },{ -1 }},
{ { 6 },{ 6 },{ 6 },{ -1 }},
{ { 6 },{ 6 },{ 6 },{ 6 }},
{ { 6 },{ 6 },{ 6 },{ 6 }},
{ { 6 },{ 6 },{ 6 },{ 6 }},
{ { 6 },{ 6 },{ 6 },{ 6 }},
{ { 6 },{ 6 },{ 6 },{ 6 }},
{ { 6 },{ 6 },{ 6 },{ 6 }},
{ { 6 },{ 6 },{ 6 },{ 6 }},
{ { 6 },{ 6 },{ 6 },{ 6 }},
{ { 6 },{ 6 },{ 6 },{ 6 }},
{ { 6 },{ 6 },{ 6 },{ 6 }},
{ { 6 },{ 6 },{ 6 },{ 6 }},
{ { 6 },{ 6 },{ 6 },{ 6 }},
{ { 6 },{ 6 },{ 6 },{ 6 }},
{ { 6 },{ 6 },{ 6 },{ 6 }}
};
unsigned char CoeffTokenCodesCoder_nC_8_to_max_data[17][4][4]={
{ { 12, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 0, 0, 0, 0 } ,{ 4, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 16, 0, 0, 0 } ,{ 20, 0, 0, 0 } ,{ 24, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 32, 0, 0, 0 } ,{ 36, 0, 0, 0 } ,{ 40, 0, 0, 0 } ,{ 44, 0, 0, 0 } },
{ { 48, 0, 0, 0 } ,{ 52, 0, 0, 0 } ,{ 56, 0, 0, 0 } ,{ 60, 0, 0, 0 } },
{ { 64, 0, 0, 0 } ,{ 68, 0, 0, 0 } ,{ 72, 0, 0, 0 } ,{ 76, 0, 0, 0 } },
{ { 80, 0, 0, 0 } ,{ 84, 0, 0, 0 } ,{ 88, 0, 0, 0 } ,{ 92, 0, 0, 0 } },
{ { 96, 0, 0, 0 } ,{ 100, 0, 0, 0 } ,{ 104, 0, 0, 0 } ,{ 108, 0, 0, 0 } },
{ { 112, 0, 0, 0 } ,{ 116, 0, 0, 0 } ,{ 120, 0, 0, 0 } ,{ 124, 0, 0, 0 } },
{ { 128, 0, 0, 0 } ,{ 132, 0, 0, 0 } ,{ 136, 0, 0, 0 } ,{ 140, 0, 0, 0 } },
{ { 144, 0, 0, 0 } ,{ 148, 0, 0, 0 } ,{ 152, 0, 0, 0 } ,{ 156, 0, 0, 0 } },
{ { 160, 0, 0, 0 } ,{ 164, 0, 0, 0 } ,{ 168, 0, 0, 0 } ,{ 172, 0, 0, 0 } },
{ { 176, 0, 0, 0 } ,{ 180, 0, 0, 0 } ,{ 184, 0, 0, 0 } ,{ 188, 0, 0, 0 } },
{ { 192, 0, 0, 0 } ,{ 196, 0, 0, 0 } ,{ 200, 0, 0, 0 } ,{ 204, 0, 0, 0 } },
{ { 208, 0, 0, 0 } ,{ 212, 0, 0, 0 } ,{ 216, 0, 0, 0 } ,{ 220, 0, 0, 0 } },
{ { 224, 0, 0, 0 } ,{ 228, 0, 0, 0 } ,{ 232, 0, 0, 0 } ,{ 236, 0, 0, 0 } },
{ { 240, 0, 0, 0 } ,{ 244, 0, 0, 0 } ,{ 248, 0, 0, 0 } ,{ 252, 0, 0, 0 } }
};
int CoeffTokenCodesCoder_nC_4_to_8_length[17][4]={
{ { 4 },{ -1 },{ -1 },{ -1 }},
{ { 6 },{ 4 },{ -1 },{ -1 }},
{ { 6 },{ 5 },{ 4 },{ -1 }},
{ { 6 },{ 5 },{ 5 },{ 4 }},
{ { 7 },{ 5 },{ 5 },{ 4 }},
{ { 7 },{ 5 },{ 5 },{ 4 }},
{ { 7 },{ 6 },{ 6 },{ 4 }},
{ { 7 },{ 6 },{ 6 },{ 4 }},
{ { 8 },{ 7 },{ 7 },{ 5 }},
{ { 8 },{ 8 },{ 7 },{ 6 }},
{ { 9 },{ 8 },{ 8 },{ 7 }},
{ { 9 },{ 9 },{ 8 },{ 8 }},
{ { 9 },{ 9 },{ 9 },{ 8 }},
{ { 10 },{ 9 },{ 9 },{ 9 }},
{ { 10 },{ 10 },{ 10 },{ 10 }},
{ { 10 },{ 10 },{ 10 },{ 10 }},
{ { 10 },{ 10 },{ 10 },{ 10 }}
};
unsigned char CoeffTokenCodesCoder_nC_4_to_8_data[17][4][4]={
{ { 240, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 60, 0, 0, 0 } ,{ 224, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 44, 0, 0, 0 } ,{ 120, 0, 0, 0 } ,{ 208, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 32, 0, 0, 0 } ,{ 96, 0, 0, 0 } ,{ 112, 0, 0, 0 } ,{ 192, 0, 0, 0 } },
{ { 30, 0, 0, 0 } ,{ 80, 0, 0, 0 } ,{ 88, 0, 0, 0 } ,{ 176, 0, 0, 0 } },
{ { 22, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 72, 0, 0, 0 } ,{ 160, 0, 0, 0 } },
{ { 18, 0, 0, 0 } ,{ 56, 0, 0, 0 } ,{ 52, 0, 0, 0 } ,{ 144, 0, 0, 0 } },
{ { 16, 0, 0, 0 } ,{ 40, 0, 0, 0 } ,{ 36, 0, 0, 0 } ,{ 128, 0, 0, 0 } },
{ { 15, 0, 0, 0 } ,{ 28, 0, 0, 0 } ,{ 26, 0, 0, 0 } ,{ 104, 0, 0, 0 } },
{ { 11, 0, 0, 0 } ,{ 14, 0, 0, 0 } ,{ 20, 0, 0, 0 } ,{ 48, 0, 0, 0 } },
{ { 7, 128, 0, 0 } ,{ 10, 0, 0, 0 } ,{ 13, 0, 0, 0 } ,{ 24, 0, 0, 0 } },
{ { 5, 128, 0, 0 } ,{ 7, 0, 0, 0 } ,{ 9, 0, 0, 0 } ,{ 12, 0, 0, 0 } },
{ { 4, 0, 0, 0 } ,{ 5, 0, 0, 0 } ,{ 6, 128, 0, 0 } ,{ 8, 0, 0, 0 } },
{ { 3, 64, 0, 0 } ,{ 3, 128, 0, 0 } ,{ 4, 128, 0, 0 } ,{ 6, 0, 0, 0 } },
{ { 2, 64, 0, 0 } ,{ 3, 0, 0, 0 } ,{ 2, 192, 0, 0 } ,{ 2, 128, 0, 0 } },
{ { 1, 64, 0, 0 } ,{ 2, 0, 0, 0 } ,{ 1, 192, 0, 0 } ,{ 1, 128, 0, 0 } },
{ { 0, 64, 0, 0 } ,{ 1, 0, 0, 0 } ,{ 0, 192, 0, 0 } ,{ 0, 128, 0, 0 } }
};
int CoeffTokenCodesCoder_nC_2_to_4_length[17][4]={
{ { 2 },{ -1 },{ -1 },{ -1 }},
{ { 6 },{ 2 },{ -1 },{ -1 }},
{ { 6 },{ 5 },{ 3 },{ -1 }},
{ { 7 },{ 6 },{ 6 },{ 4 }},
{ { 8 },{ 6 },{ 6 },{ 4 }},
{ { 8 },{ 7 },{ 7 },{ 5 }},
{ { 9 },{ 8 },{ 8 },{ 6 }},
{ { 11 },{ 9 },{ 9 },{ 6 }},
{ { 11 },{ 11 },{ 11 },{ 7 }},
{ { 12 },{ 11 },{ 11 },{ 9 }},
{ { 12 },{ 12 },{ 12 },{ 11 }},
{ { 12 },{ 12 },{ 12 },{ 11 }},
{ { 13 },{ 13 },{ 13 },{ 12 }},
{ { 13 },{ 13 },{ 13 },{ 13 }},
{ { 13 },{ 14 },{ 13 },{ 13 }},
{ { 14 },{ 14 },{ 14 },{ 13 }},
{ { 14 },{ 14 },{ 14 },{ 14 }}
};
unsigned char CoeffTokenCodesCoder_nC_2_to_4_data[17][4][4]={
{ { 192, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 44, 0, 0, 0 } ,{ 128, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 28, 0, 0, 0 } ,{ 56, 0, 0, 0 } ,{ 96, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 14, 0, 0, 0 } ,{ 40, 0, 0, 0 } ,{ 36, 0, 0, 0 } ,{ 80, 0, 0, 0 } },
{ { 7, 0, 0, 0 } ,{ 24, 0, 0, 0 } ,{ 20, 0, 0, 0 } ,{ 64, 0, 0, 0 } },
{ { 4, 0, 0, 0 } ,{ 12, 0, 0, 0 } ,{ 10, 0, 0, 0 } ,{ 48, 0, 0, 0 } },
{ { 3, 128, 0, 0 } ,{ 6, 0, 0, 0 } ,{ 5, 0, 0, 0 } ,{ 32, 0, 0, 0 } },
{ { 1, 224, 0, 0 } ,{ 3, 0, 0, 0 } ,{ 2, 128, 0, 0 } ,{ 16, 0, 0, 0 } },
{ { 1, 96, 0, 0 } ,{ 1, 192, 0, 0 } ,{ 1, 160, 0, 0 } ,{ 8, 0, 0, 0 } },
{ { 0, 240, 0, 0 } ,{ 1, 64, 0, 0 } ,{ 1, 32, 0, 0 } ,{ 2, 0, 0, 0 } },
{ { 0, 176, 0, 0 } ,{ 0, 224, 0, 0 } ,{ 0, 208, 0, 0 } ,{ 1, 128, 0, 0 } },
{ { 0, 128, 0, 0 } ,{ 0, 160, 0, 0 } ,{ 0, 144, 0, 0 } ,{ 1, 0, 0, 0 } },
{ { 0, 120, 0, 0 } ,{ 0, 112, 0, 0 } ,{ 0, 104, 0, 0 } ,{ 0, 192, 0, 0 } },
{ { 0, 88, 0, 0 } ,{ 0, 80, 0, 0 } ,{ 0, 72, 0, 0 } ,{ 0, 96, 0, 0 } },
{ { 0, 56, 0, 0 } ,{ 0, 44, 0, 0 } ,{ 0, 48, 0, 0 } ,{ 0, 64, 0, 0 } },
{ { 0, 36, 0, 0 } ,{ 0, 32, 0, 0 } ,{ 0, 40, 0, 0 } ,{ 0, 8, 0, 0 } },
{ { 0, 28, 0, 0 } ,{ 0, 24, 0, 0 } ,{ 0, 20, 0, 0 } ,{ 0, 16, 0, 0 } }
};
int CoeffTokenCodesCoder_nC_0_to_2_length[17][4]={
{ { 1 },{ -1 },{ -1 },{ -1 }},
{ { 6 },{ 2 },{ -1 },{ -1 }},
{ { 8 },{ 6 },{ 3 },{ -1 }},
{ { 9 },{ 8 },{ 7 },{ 5 }},
{ { 10 },{ 9 },{ 8 },{ 6 }},
{ { 11 },{ 10 },{ 9 },{ 7 }},
{ { 13 },{ 11 },{ 10 },{ 8 }},
{ { 13 },{ 13 },{ 11 },{ 9 }},
{ { 13 },{ 13 },{ 13 },{ 10 }},
{ { 14 },{ 14 },{ 13 },{ 11 }},
{ { 14 },{ 14 },{ 14 },{ 13 }},
{ { 15 },{ 15 },{ 14 },{ 14 }},
{ { 15 },{ 15 },{ 15 },{ 14 }},
{ { 16 },{ 15 },{ 15 },{ 15 }},
{ { 16 },{ 16 },{ 16 },{ 15 }},
{ { 16 },{ 16 },{ 16 },{ 16 }},
{ { 16 },{ 16 },{ 16 },{ 16 }}
};
unsigned char CoeffTokenCodesCoder_nC_0_to_2_data[17][4][4]={
{ { 128, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 20, 0, 0, 0 } ,{ 64, 0, 0, 0 } ,{ 0, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 7, 0, 0, 0 } ,{ 16, 0, 0, 0 } ,{ 32, 0, 0, 0 } ,{ 0, 0, 0, 0 } },
{ { 3, 128, 0, 0 } ,{ 6, 0, 0, 0 } ,{ 10, 0, 0, 0 } ,{ 24, 0, 0, 0 } },
{ { 1, 192, 0, 0 } ,{ 3, 0, 0, 0 } ,{ 5, 0, 0, 0 } ,{ 12, 0, 0, 0 } },
{ { 0, 224, 0, 0 } ,{ 1, 128, 0, 0 } ,{ 2, 128, 0, 0 } ,{ 8, 0, 0, 0 } },
{ { 0, 120, 0, 0 } ,{ 0, 192, 0, 0 } ,{ 1, 64, 0, 0 } ,{ 4, 0, 0, 0 } },
{ { 0, 88, 0, 0 } ,{ 0, 112, 0, 0 } ,{ 0, 160, 0, 0 } ,{ 2, 0, 0, 0 } },
{ { 0, 64, 0, 0 } ,{ 0, 80, 0, 0 } ,{ 0, 104, 0, 0 } ,{ 1, 0, 0, 0 } },
{ { 0, 60, 0, 0 } ,{ 0, 56, 0, 0 } ,{ 0, 72, 0, 0 } ,{ 0, 128, 0, 0 } },
{ { 0, 44, 0, 0 } ,{ 0, 40, 0, 0 } ,{ 0, 52, 0, 0 } ,{ 0, 96, 0, 0 } },
{ { 0, 30, 0, 0 } ,{ 0, 28, 0, 0 } ,{ 0, 36, 0, 0 } ,{ 0, 48, 0, 0 } },
{ { 0, 22, 0, 0 } ,{ 0, 20, 0, 0 } ,{ 0, 26, 0, 0 } ,{ 0, 32, 0, 0 } },
{ { 0, 15, 0, 0 } ,{ 0, 2, 0, 0 } ,{ 0, 18, 0, 0 } ,{ 0, 24, 0, 0 } },
{ { 0, 11, 0, 0 } ,{ 0, 14, 0, 0 } ,{ 0, 13, 0, 0 } ,{ 0, 16, 0, 0 } },
{ { 0, 7, 0, 0 } ,{ 0, 10, 0, 0 } ,{ 0, 9, 0, 0 } ,{ 0, 12, 0, 0 } },
{ { 0, 4, 0, 0 } ,{ 0, 6, 0, 0 } ,{ 0, 5, 0, 0 } ,{ 0, 8, 0, 0 } }
};


int CoeffTokenCodes[4][64][3]={ {
///// 0  <=  nC  <  2 /////
  { 0x00000000,  0, 0 },  // BOT
  { 0x00020000, 15, COEFF_TOKEN(1,13) },  // 0000 0000 0000 001
  { 0x00040000, 16, COEFF_TOKEN(0,16) },  // 0000 0000 0000 0100
  { 0x00050000, 16, COEFF_TOKEN(2,16) },  // 0000 0000 0000 0101
  { 0x00060000, 16, COEFF_TOKEN(1,16) },  // 0000 0000 0000 0110
  { 0x00070000, 16, COEFF_TOKEN(0,15) },  // 0000 0000 0000 0111
  { 0x00080000, 16, COEFF_TOKEN(3,16) },  // 0000 0000 0000 1000
  { 0x00090000, 16, COEFF_TOKEN(2,15) },  // 0000 0000 0000 1001
  { 0x000A0000, 16, COEFF_TOKEN(1,15) },  // 0000 0000 0000 1010
  { 0x000B0000, 16, COEFF_TOKEN(0,14) },  // 0000 0000 0000 1011
  { 0x000C0000, 16, COEFF_TOKEN(3,15) },  // 0000 0000 0000 1100
  { 0x000D0000, 16, COEFF_TOKEN(2,14) },  // 0000 0000 0000 1101
  { 0x000E0000, 16, COEFF_TOKEN(1,14) },  // 0000 0000 0000 1110
  { 0x000F0000, 16, COEFF_TOKEN(0,13) },  // 0000 0000 0000 1111
  { 0x00100000, 15, COEFF_TOKEN(3,14) },  // 0000 0000 0001 000
  { 0x00120000, 15, COEFF_TOKEN(2,13) },  // 0000 0000 0001 001
  { 0x00140000, 15, COEFF_TOKEN(1,12) },  // 0000 0000 0001 010
  { 0x00160000, 15, COEFF_TOKEN(0,12) },  // 0000 0000 0001 011
  { 0x00180000, 15, COEFF_TOKEN(3,13) },  // 0000 0000 0001 100
  { 0x001A0000, 15, COEFF_TOKEN(2,12) },  // 0000 0000 0001 101
  { 0x001C0000, 15, COEFF_TOKEN(1,11) },  // 0000 0000 0001 110
  { 0x001E0000, 15, COEFF_TOKEN(0,11) },  // 0000 0000 0001 111
  { 0x00200000, 14, COEFF_TOKEN(3,12) },  // 0000 0000 0010 00
  { 0x00240000, 14, COEFF_TOKEN(2,11) },  // 0000 0000 0010 01
  { 0x00280000, 14, COEFF_TOKEN(1,10) },  // 0000 0000 0010 10
  { 0x002C0000, 14, COEFF_TOKEN(0,10) },  // 0000 0000 0010 11
  { 0x00300000, 14, COEFF_TOKEN(3,11) },  // 0000 0000 0011 00
  { 0x00340000, 14, COEFF_TOKEN(2,10) },  // 0000 0000 0011 01
  { 0x00380000, 14, COEFF_TOKEN(1, 9) },  // 0000 0000 0011 10
  { 0x003C0000, 14, COEFF_TOKEN(0, 9) },  // 0000 0000 0011 11
  { 0x00400000, 13, COEFF_TOKEN(0, 8) },  // 0000 0000 0100 0
  { 0x00480000, 13, COEFF_TOKEN(2, 9) },  // 0000 0000 0100 1
  { 0x00500000, 13, COEFF_TOKEN(1, 8) },  // 0000 0000 0101 0
  { 0x00580000, 13, COEFF_TOKEN(0, 7) },  // 0000 0000 0101 1
  { 0x00600000, 13, COEFF_TOKEN(3,10) },  // 0000 0000 0110 0
  { 0x00680000, 13, COEFF_TOKEN(2, 8) },  // 0000 0000 0110 1
  { 0x00700000, 13, COEFF_TOKEN(1, 7) },  // 0000 0000 0111 0
  { 0x00780000, 13, COEFF_TOKEN(0, 6) },  // 0000 0000 0111 1
  { 0x00800000, 11, COEFF_TOKEN(3, 9) },  // 0000 0000 100
  { 0x00A00000, 11, COEFF_TOKEN(2, 7) },  // 0000 0000 101
  { 0x00C00000, 11, COEFF_TOKEN(1, 6) },  // 0000 0000 110
  { 0x00E00000, 11, COEFF_TOKEN(0, 5) },  // 0000 0000 111
  { 0x01000000, 10, COEFF_TOKEN(3, 8) },  // 0000 0001 00
  { 0x01400000, 10, COEFF_TOKEN(2, 6) },  // 0000 0001 01
  { 0x01800000, 10, COEFF_TOKEN(1, 5) },  // 0000 0001 10
  { 0x01C00000, 10, COEFF_TOKEN(0, 4) },  // 0000 0001 11
  { 0x02000000,  9, COEFF_TOKEN(3, 7) },  // 0000 0010 0
  { 0x02800000,  9, COEFF_TOKEN(2, 5) },  // 0000 0010 1
  { 0x03000000,  9, COEFF_TOKEN(1, 4) },  // 0000 0011 0
  { 0x03800000,  9, COEFF_TOKEN(0, 3) },  // 0000 0011 1
  { 0x04000000,  8, COEFF_TOKEN(3, 6) },  // 0000 0100
  { 0x05000000,  8, COEFF_TOKEN(2, 4) },  // 0000 0101
  { 0x06000000,  8, COEFF_TOKEN(1, 3) },  // 0000 0110
  { 0x07000000,  8, COEFF_TOKEN(0, 2) },  // 0000 0111
  { 0x08000000,  7, COEFF_TOKEN(3, 5) },  // 0000 100
  { 0x0A000000,  7, COEFF_TOKEN(2, 3) },  // 0000 101
  { 0x0C000000,  6, COEFF_TOKEN(3, 4) },  // 0000 11
  { 0x10000000,  6, COEFF_TOKEN(1, 2) },  // 0001 00
  { 0x14000000,  6, COEFF_TOKEN(0, 1) },  // 0001 01
  { 0x18000000,  5, COEFF_TOKEN(3, 3) },  // 0001 1
  { 0x20000000,  3, COEFF_TOKEN(2, 2) },  // 001
  { 0x40000000,  2, COEFF_TOKEN(1, 1) },  // 01
  { 0x80000000,  1, COEFF_TOKEN(0, 0) },  // 1
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 2  <=  nC  <  4 /////
  { 0x00000000,  0, 0 },  // BOT
  { 0x00080000, 13, COEFF_TOKEN(3,15) },  // 0000 0000 0000 1
  { 0x00100000, 14, COEFF_TOKEN(3,16) },  // 0000 0000 0001 00
  { 0x00140000, 14, COEFF_TOKEN(2,16) },  // 0000 0000 0001 01
  { 0x00180000, 14, COEFF_TOKEN(1,16) },  // 0000 0000 0001 10
  { 0x001C0000, 14, COEFF_TOKEN(0,16) },  // 0000 0000 0001 11
  { 0x00200000, 14, COEFF_TOKEN(1,15) },  // 0000 0000 0010 00
  { 0x00240000, 14, COEFF_TOKEN(0,15) },  // 0000 0000 0010 01
  { 0x00280000, 14, COEFF_TOKEN(2,15) },  // 0000 0000 0010 10
  { 0x002C0000, 14, COEFF_TOKEN(1,14) },  // 0000 0000 0010 11
  { 0x00300000, 13, COEFF_TOKEN(2,14) },  // 0000 0000 0011 0
  { 0x00380000, 13, COEFF_TOKEN(0,14) },  // 0000 0000 0011 1
  { 0x00400000, 13, COEFF_TOKEN(3,14) },  // 0000 0000 0100 0
  { 0x00480000, 13, COEFF_TOKEN(2,13) },  // 0000 0000 0100 1
  { 0x00500000, 13, COEFF_TOKEN(1,13) },  // 0000 0000 0101 0
  { 0x00580000, 13, COEFF_TOKEN(0,13) },  // 0000 0000 0101 1
  { 0x00600000, 13, COEFF_TOKEN(3,13) },  // 0000 0000 0110 0
  { 0x00680000, 13, COEFF_TOKEN(2,12) },  // 0000 0000 0110 1
  { 0x00700000, 13, COEFF_TOKEN(1,12) },  // 0000 0000 0111 0
  { 0x00780000, 13, COEFF_TOKEN(0,12) },  // 0000 0000 0111 1
  { 0x00800000, 12, COEFF_TOKEN(0,11) },  // 0000 0000 1000
  { 0x00900000, 12, COEFF_TOKEN(2,11) },  // 0000 0000 1001
  { 0x00A00000, 12, COEFF_TOKEN(1,11) },  // 0000 0000 1010
  { 0x00B00000, 12, COEFF_TOKEN(0,10) },  // 0000 0000 1011
  { 0x00C00000, 12, COEFF_TOKEN(3,12) },  // 0000 0000 1100
  { 0x00D00000, 12, COEFF_TOKEN(2,10) },  // 0000 0000 1101
  { 0x00E00000, 12, COEFF_TOKEN(1,10) },  // 0000 0000 1110
  { 0x00F00000, 12, COEFF_TOKEN(0, 9) },  // 0000 0000 1111
  { 0x01000000, 11, COEFF_TOKEN(3,11) },  // 0000 0001 000
  { 0x01200000, 11, COEFF_TOKEN(2, 9) },  // 0000 0001 001
  { 0x01400000, 11, COEFF_TOKEN(1, 9) },  // 0000 0001 010
  { 0x01600000, 11, COEFF_TOKEN(0, 8) },  // 0000 0001 011
  { 0x01800000, 11, COEFF_TOKEN(3,10) },  // 0000 0001 100
  { 0x01A00000, 11, COEFF_TOKEN(2, 8) },  // 0000 0001 101
  { 0x01C00000, 11, COEFF_TOKEN(1, 8) },  // 0000 0001 110
  { 0x01E00000, 11, COEFF_TOKEN(0, 7) },  // 0000 0001 111
  { 0x02000000,  9, COEFF_TOKEN(3, 9) },  // 0000 0010 0
  { 0x02800000,  9, COEFF_TOKEN(2, 7) },  // 0000 0010 1
  { 0x03000000,  9, COEFF_TOKEN(1, 7) },  // 0000 0011 0
  { 0x03800000,  9, COEFF_TOKEN(0, 6) },  // 0000 0011 1
  { 0x04000000,  8, COEFF_TOKEN(0, 5) },  // 0000 0100
  { 0x05000000,  8, COEFF_TOKEN(2, 6) },  // 0000 0101
  { 0x06000000,  8, COEFF_TOKEN(1, 6) },  // 0000 0110
  { 0x07000000,  8, COEFF_TOKEN(0, 4) },  // 0000 0111
  { 0x08000000,  7, COEFF_TOKEN(3, 8) },  // 0000 100
  { 0x0A000000,  7, COEFF_TOKEN(2, 5) },  // 0000 101
  { 0x0C000000,  7, COEFF_TOKEN(1, 5) },  // 0000 110
  { 0x0E000000,  7, COEFF_TOKEN(0, 3) },  // 0000 111
  { 0x10000000,  6, COEFF_TOKEN(3, 7) },  // 0001 00
  { 0x14000000,  6, COEFF_TOKEN(2, 4) },  // 0001 01
  { 0x18000000,  6, COEFF_TOKEN(1, 4) },  // 0001 10
  { 0x1C000000,  6, COEFF_TOKEN(0, 2) },  // 0001 11
  { 0x20000000,  6, COEFF_TOKEN(3, 6) },  // 0010 00
  { 0x24000000,  6, COEFF_TOKEN(2, 3) },  // 0010 01
  { 0x28000000,  6, COEFF_TOKEN(1, 3) },  // 0010 10
  { 0x2C000000,  6, COEFF_TOKEN(0, 1) },  // 0010 11
  { 0x30000000,  5, COEFF_TOKEN(3, 5) },  // 0011 0
  { 0x38000000,  5, COEFF_TOKEN(1, 2) },  // 0011 1
  { 0x40000000,  4, COEFF_TOKEN(3, 4) },  // 0100
  { 0x50000000,  4, COEFF_TOKEN(3, 3) },  // 0101
  { 0x60000000,  3, COEFF_TOKEN(2, 2) },  // 011
  { 0x80000000,  2, COEFF_TOKEN(1, 1) },  // 10
  { 0xC0000000,  2, COEFF_TOKEN(0, 0) },  // 11
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 4  <=  nC  <  8 /////
  { 0x00000000,  0, 0 },  // BOT
  { 0x00400000, 10, COEFF_TOKEN(0,16) },  // 0000 0000 01
  { 0x00800000, 10, COEFF_TOKEN(3,16) },  // 0000 0000 10
  { 0x00C00000, 10, COEFF_TOKEN(2,16) },  // 0000 0000 11
  { 0x01000000, 10, COEFF_TOKEN(1,16) },  // 0000 0001 00
  { 0x01400000, 10, COEFF_TOKEN(0,15) },  // 0000 0001 01
  { 0x01800000, 10, COEFF_TOKEN(3,15) },  // 0000 0001 10
  { 0x01C00000, 10, COEFF_TOKEN(2,15) },  // 0000 0001 11
  { 0x02000000, 10, COEFF_TOKEN(1,15) },  // 0000 0010 00
  { 0x02400000, 10, COEFF_TOKEN(0,14) },  // 0000 0010 01
  { 0x02800000, 10, COEFF_TOKEN(3,14) },  // 0000 0010 10
  { 0x02C00000, 10, COEFF_TOKEN(2,14) },  // 0000 0010 11
  { 0x03000000, 10, COEFF_TOKEN(1,14) },  // 0000 0011 00
  { 0x03400000, 10, COEFF_TOKEN(0,13) },  // 0000 0011 01
  { 0x03800000,  9, COEFF_TOKEN(1,13) },  // 0000 0011 1
  { 0x04000000,  9, COEFF_TOKEN(0,12) },  // 0000 0100 0
  { 0x04800000,  9, COEFF_TOKEN(2,13) },  // 0000 0100 1
  { 0x05000000,  9, COEFF_TOKEN(1,12) },  // 0000 0101 0
  { 0x05800000,  9, COEFF_TOKEN(0,11) },  // 0000 0101 1
  { 0x06000000,  9, COEFF_TOKEN(3,13) },  // 0000 0110 0
  { 0x06800000,  9, COEFF_TOKEN(2,12) },  // 0000 0110 1
  { 0x07000000,  9, COEFF_TOKEN(1,11) },  // 0000 0111 0
  { 0x07800000,  9, COEFF_TOKEN(0,10) },  // 0000 0111 1
  { 0x08000000,  8, COEFF_TOKEN(3,12) },  // 0000 1000
  { 0x09000000,  8, COEFF_TOKEN(2,11) },  // 0000 1001
  { 0x0A000000,  8, COEFF_TOKEN(1,10) },  // 0000 1010
  { 0x0B000000,  8, COEFF_TOKEN(0, 9) },  // 0000 1011
  { 0x0C000000,  8, COEFF_TOKEN(3,11) },  // 0000 1100
  { 0x0D000000,  8, COEFF_TOKEN(2,10) },  // 0000 1101
  { 0x0E000000,  8, COEFF_TOKEN(1, 9) },  // 0000 1110
  { 0x0F000000,  8, COEFF_TOKEN(0, 8) },  // 0000 1111
  { 0x10000000,  7, COEFF_TOKEN(0, 7) },  // 0001 000
  { 0x12000000,  7, COEFF_TOKEN(0, 6) },  // 0001 001
  { 0x14000000,  7, COEFF_TOKEN(2, 9) },  // 0001 010
  { 0x16000000,  7, COEFF_TOKEN(0, 5) },  // 0001 011
  { 0x18000000,  7, COEFF_TOKEN(3,10) },  // 0001 100
  { 0x1A000000,  7, COEFF_TOKEN(2, 8) },  // 0001 101
  { 0x1C000000,  7, COEFF_TOKEN(1, 8) },  // 0001 110
  { 0x1E000000,  7, COEFF_TOKEN(0, 4) },  // 0001 111
  { 0x20000000,  6, COEFF_TOKEN(0, 3) },  // 0010 00
  { 0x24000000,  6, COEFF_TOKEN(2, 7) },  // 0010 01
  { 0x28000000,  6, COEFF_TOKEN(1, 7) },  // 0010 10
  { 0x2C000000,  6, COEFF_TOKEN(0, 2) },  // 0010 11
  { 0x30000000,  6, COEFF_TOKEN(3, 9) },  // 0011 00
  { 0x34000000,  6, COEFF_TOKEN(2, 6) },  // 0011 01
  { 0x38000000,  6, COEFF_TOKEN(1, 6) },  // 0011 10
  { 0x3C000000,  6, COEFF_TOKEN(0, 1) },  // 0011 11
  { 0x40000000,  5, COEFF_TOKEN(1, 5) },  // 0100 0
  { 0x48000000,  5, COEFF_TOKEN(2, 5) },  // 0100 1
  { 0x50000000,  5, COEFF_TOKEN(1, 4) },  // 0101 0
  { 0x58000000,  5, COEFF_TOKEN(2, 4) },  // 0101 1
  { 0x60000000,  5, COEFF_TOKEN(1, 3) },  // 0110 0
  { 0x68000000,  5, COEFF_TOKEN(3, 8) },  // 0110 1
  { 0x70000000,  5, COEFF_TOKEN(2, 3) },  // 0111 0
  { 0x78000000,  5, COEFF_TOKEN(1, 2) },  // 0111 1
  { 0x80000000,  4, COEFF_TOKEN(3, 7) },  // 1000
  { 0x90000000,  4, COEFF_TOKEN(3, 6) },  // 1001
  { 0xA0000000,  4, COEFF_TOKEN(3, 5) },  // 1010
  { 0xB0000000,  4, COEFF_TOKEN(3, 4) },  // 1011
  { 0xC0000000,  4, COEFF_TOKEN(3, 3) },  // 1100
  { 0xD0000000,  4, COEFF_TOKEN(2, 2) },  // 1101
  { 0xE0000000,  4, COEFF_TOKEN(1, 1) },  // 1110
  { 0xF0000000,  4, COEFF_TOKEN(0, 0) },  // 1111
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 8  <=  nC /////
  { 0x00000000,  6, COEFF_TOKEN(0, 1) },  // 0000 00
  { 0x04000000,  6, COEFF_TOKEN(1, 1) },  // 0000 01
  { 0x0C000000,  6, COEFF_TOKEN(0, 0) },  // 0000 11
  { 0x10000000,  6, COEFF_TOKEN(0, 2) },  // 0001 00
  { 0x14000000,  6, COEFF_TOKEN(1, 2) },  // 0001 01
  { 0x18000000,  6, COEFF_TOKEN(2, 2) },  // 0001 10
  { 0x20000000,  6, COEFF_TOKEN(0, 3) },  // 0010 00
  { 0x24000000,  6, COEFF_TOKEN(1, 3) },  // 0010 01
  { 0x28000000,  6, COEFF_TOKEN(2, 3) },  // 0010 10
  { 0x2C000000,  6, COEFF_TOKEN(3, 3) },  // 0010 11
  { 0x30000000,  6, COEFF_TOKEN(0, 4) },  // 0011 00
  { 0x34000000,  6, COEFF_TOKEN(1, 4) },  // 0011 01
  { 0x38000000,  6, COEFF_TOKEN(2, 4) },  // 0011 10
  { 0x3C000000,  6, COEFF_TOKEN(3, 4) },  // 0011 11
  { 0x40000000,  6, COEFF_TOKEN(0, 5) },  // 0100 00
  { 0x44000000,  6, COEFF_TOKEN(1, 5) },  // 0100 01
  { 0x48000000,  6, COEFF_TOKEN(2, 5) },  // 0100 10
  { 0x4C000000,  6, COEFF_TOKEN(3, 5) },  // 0100 11
  { 0x50000000,  6, COEFF_TOKEN(0, 6) },  // 0101 00
  { 0x54000000,  6, COEFF_TOKEN(1, 6) },  // 0101 01
  { 0x58000000,  6, COEFF_TOKEN(2, 6) },  // 0101 10
  { 0x5C000000,  6, COEFF_TOKEN(3, 6) },  // 0101 11
  { 0x60000000,  6, COEFF_TOKEN(0, 7) },  // 0110 00
  { 0x64000000,  6, COEFF_TOKEN(1, 7) },  // 0110 01
  { 0x68000000,  6, COEFF_TOKEN(2, 7) },  // 0110 10
  { 0x6C000000,  6, COEFF_TOKEN(3, 7) },  // 0110 11
  { 0x70000000,  6, COEFF_TOKEN(0, 8) },  // 0111 00
  { 0x74000000,  6, COEFF_TOKEN(1, 8) },  // 0111 01
  { 0x78000000,  6, COEFF_TOKEN(2, 8) },  // 0111 10
  { 0x7C000000,  6, COEFF_TOKEN(3, 8) },  // 0111 11
  { 0x80000000,  6, COEFF_TOKEN(0, 9) },  // 1000 00
  { 0x84000000,  6, COEFF_TOKEN(1, 9) },  // 1000 01
  { 0x88000000,  6, COEFF_TOKEN(2, 9) },  // 1000 10
  { 0x8C000000,  6, COEFF_TOKEN(3, 9) },  // 1000 11
  { 0x90000000,  6, COEFF_TOKEN(0,10) },  // 1001 00
  { 0x94000000,  6, COEFF_TOKEN(1,10) },  // 1001 01
  { 0x98000000,  6, COEFF_TOKEN(2,10) },  // 1001 10
  { 0x9C000000,  6, COEFF_TOKEN(3,10) },  // 1001 11
  { 0xA0000000,  6, COEFF_TOKEN(0,11) },  // 1010 00
  { 0xA4000000,  6, COEFF_TOKEN(1,11) },  // 1010 01
  { 0xA8000000,  6, COEFF_TOKEN(2,11) },  // 1010 10
  { 0xAC000000,  6, COEFF_TOKEN(3,11) },  // 1010 11
  { 0xB0000000,  6, COEFF_TOKEN(0,12) },  // 1011 00
  { 0xB4000000,  6, COEFF_TOKEN(1,12) },  // 1011 01
  { 0xB8000000,  6, COEFF_TOKEN(2,12) },  // 1011 10
  { 0xBC000000,  6, COEFF_TOKEN(3,12) },  // 1011 11
  { 0xC0000000,  6, COEFF_TOKEN(0,13) },  // 1100 00
  { 0xC4000000,  6, COEFF_TOKEN(1,13) },  // 1100 01
  { 0xC8000000,  6, COEFF_TOKEN(2,13) },  // 1100 10
  { 0xCC000000,  6, COEFF_TOKEN(3,13) },  // 1100 11
  { 0xD0000000,  6, COEFF_TOKEN(0,14) },  // 1101 00
  { 0xD4000000,  6, COEFF_TOKEN(1,14) },  // 1101 01
  { 0xD8000000,  6, COEFF_TOKEN(2,14) },  // 1101 10
  { 0xDC000000,  6, COEFF_TOKEN(3,14) },  // 1101 11
  { 0xE0000000,  6, COEFF_TOKEN(0,15) },  // 1110 00
  { 0xE4000000,  6, COEFF_TOKEN(1,15) },  // 1110 01
  { 0xE8000000,  6, COEFF_TOKEN(2,15) },  // 1110 10
  { 0xEC000000,  6, COEFF_TOKEN(3,15) },  // 1110 11
  { 0xF0000000,  6, COEFF_TOKEN(0,16) },  // 1111 00
  { 0xF4000000,  6, COEFF_TOKEN(1,16) },  // 1111 01
  { 0xF8000000,  6, COEFF_TOKEN(2,16) },  // 1111 10
  { 0xFC000000,  6, COEFF_TOKEN(3,16) },  // 1111 11
  { 0xFFFFFFFF,  0, 0 }  // EOT
} };


int CoeffTokenCodes_ChromaDC[15][3]={
  { 0x00000000,  7, COEFF_TOKEN(3, 4) },  // 0000 000
  { 0x02000000,  8, COEFF_TOKEN(2, 4) },  // 0000 0010
  { 0x03000000,  8, COEFF_TOKEN(1, 4) },  // 0000 0011
  { 0x04000000,  7, COEFF_TOKEN(2, 3) },  // 0000 010
  { 0x06000000,  7, COEFF_TOKEN(1, 3) },  // 0000 011
  { 0x08000000,  6, COEFF_TOKEN(0, 4) },  // 0000 10
  { 0x0C000000,  6, COEFF_TOKEN(0, 3) },  // 0000 11
  { 0x10000000,  6, COEFF_TOKEN(0, 2) },  // 0001 00
  { 0x14000000,  6, COEFF_TOKEN(3, 3) },  // 0001 01
  { 0x18000000,  6, COEFF_TOKEN(1, 2) },  // 0001 10
  { 0x1C000000,  6, COEFF_TOKEN(0, 1) },  // 0001 11
  { 0x20000000,  3, COEFF_TOKEN(2, 2) },  // 001
  { 0x40000000,  2, COEFF_TOKEN(0, 0) },  // 01
  { 0x80000000,  1, COEFF_TOKEN(1, 1) },  // 1
  { 0xFFFFFFFF,  0, 0 }  // EOT
};


int TotalZerosCodes_4x4[15][18][3]={ {
///// 1 /////
  { 0x00000000,  0, 0 },  // BOT
  { 0x00800000,  9, 15 },  // 0000 0000 1
  { 0x01000000,  9, 14 },  // 0000 0001 0
  { 0x01800000,  9, 13 },  // 0000 0001 1
  { 0x02000000,  8, 12 },  // 0000 0010
  { 0x03000000,  8, 11 },  // 0000 0011
  { 0x04000000,  7, 10 },  // 0000 010
  { 0x06000000,  7,  9 },  // 0000 011
  { 0x08000000,  6,  8 },  // 0000 10
  { 0x0C000000,  6,  7 },  // 0000 11
  { 0x10000000,  5,  6 },  // 0001 0
  { 0x18000000,  5,  5 },  // 0001 1
  { 0x20000000,  4,  4 },  // 0010
  { 0x30000000,  4,  3 },  // 0011
  { 0x40000000,  3,  2 },  // 010
  { 0x60000000,  3,  1 },  // 011
  { 0x80000000,  1,  0 },  // 1
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 2 /////
  { 0x00000000,  6, 14 },  // 0000 00
  { 0x04000000,  6, 13 },  // 0000 01
  { 0x08000000,  6, 12 },  // 0000 10
  { 0x0C000000,  6, 11 },  // 0000 11
  { 0x10000000,  5, 10 },  // 0001 0
  { 0x18000000,  5,  9 },  // 0001 1
  { 0x20000000,  4,  8 },  // 0010
  { 0x30000000,  4,  7 },  // 0011
  { 0x40000000,  4,  6 },  // 0100
  { 0x50000000,  4,  5 },  // 0101
  { 0x60000000,  3,  4 },  // 011
  { 0x80000000,  3,  3 },  // 100
  { 0xA0000000,  3,  2 },  // 101
  { 0xC0000000,  3,  1 },  // 110
  { 0xE0000000,  3,  0 },  // 111
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 3 /////
  { 0x00000000,  6, 13 },  // 0000 00
  { 0x04000000,  6, 11 },  // 0000 01
  { 0x08000000,  5, 12 },  // 0000 1
  { 0x10000000,  5, 10 },  // 0001 0
  { 0x18000000,  5,  9 },  // 0001 1
  { 0x20000000,  4,  8 },  // 0010
  { 0x30000000,  4,  5 },  // 0011
  { 0x40000000,  4,  4 },  // 0100
  { 0x50000000,  4,  0 },  // 0101
  { 0x60000000,  3,  7 },  // 011
  { 0x80000000,  3,  6 },  // 100
  { 0xA0000000,  3,  3 },  // 101
  { 0xC0000000,  3,  2 },  // 110
  { 0xE0000000,  3,  1 },  // 111
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 4 /////
  { 0x00000000,  5, 12 },  // 0000 0
  { 0x08000000,  5, 11 },  // 0000 1
  { 0x10000000,  5, 10 },  // 0001 0
  { 0x18000000,  5,  0 },  // 0001 1
  { 0x20000000,  4,  9 },  // 0010
  { 0x30000000,  4,  7 },  // 0011
  { 0x40000000,  4,  3 },  // 0100
  { 0x50000000,  4,  2 },  // 0101
  { 0x60000000,  3,  8 },  // 011
  { 0x80000000,  3,  6 },  // 100
  { 0xA0000000,  3,  5 },  // 101
  { 0xC0000000,  3,  4 },  // 110
  { 0xE0000000,  3,  1 },  // 111
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 5 /////
  { 0x00000000,  5, 11 },  // 0000 0
  { 0x08000000,  5,  9 },  // 0000 1
  { 0x10000000,  4, 10 },  // 0001
  { 0x20000000,  4,  8 },  // 0010
  { 0x30000000,  4,  2 },  // 0011
  { 0x40000000,  4,  1 },  // 0100
  { 0x50000000,  4,  0 },  // 0101
  { 0x60000000,  3,  7 },  // 011
  { 0x80000000,  3,  6 },  // 100
  { 0xA0000000,  3,  5 },  // 101
  { 0xC0000000,  3,  4 },  // 110
  { 0xE0000000,  3,  3 },  // 111
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 6 /////
  { 0x00000000,  6, 10 },  // 0000 00
  { 0x04000000,  6,  0 },  // 0000 01
  { 0x08000000,  5,  1 },  // 0000 1
  { 0x10000000,  4,  8 },  // 0001
  { 0x20000000,  3,  9 },  // 001
  { 0x40000000,  3,  7 },  // 010
  { 0x60000000,  3,  6 },  // 011
  { 0x80000000,  3,  5 },  // 100
  { 0xA0000000,  3,  4 },  // 101
  { 0xC0000000,  3,  3 },  // 110
  { 0xE0000000,  3,  2 },  // 111
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 7 /////
  { 0x00000000,  6, 9 },  // 0000 00
  { 0x04000000,  6, 0 },  // 0000 01
  { 0x08000000,  5, 1 },  // 0000 1
  { 0x10000000,  4, 7 },  // 0001
  { 0x20000000,  3, 8 },  // 001
  { 0x40000000,  3, 6 },  // 010
  { 0x60000000,  3, 4 },  // 011
  { 0x80000000,  3, 3 },  // 100
  { 0xA0000000,  3, 2 },  // 101
  { 0xC0000000,  2, 5 },  // 11
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 8 /////
  { 0x00000000,  6, 8 },  // 0000 00
  { 0x04000000,  6, 0 },  // 0000 01
  { 0x08000000,  5, 2 },  // 0000 1
  { 0x10000000,  4, 1 },  // 0001
  { 0x20000000,  3, 7 },  // 001
  { 0x40000000,  3, 6 },  // 010
  { 0x60000000,  3, 3 },  // 011
  { 0x80000000,  2, 5 },  // 10
  { 0xC0000000,  2, 4 },  // 11
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 9 /////
  { 0x00000000,  6, 1 },  // 0000 00
  { 0x04000000,  6, 0 },  // 0000 01
  { 0x08000000,  5, 7 },  // 0000 1
  { 0x10000000,  4, 2 },  // 0001
  { 0x20000000,  3, 5 },  // 001
  { 0x40000000,  2, 6 },  // 01
  { 0x80000000,  2, 4 },  // 10
  { 0xC0000000,  2, 3 },  // 11
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 10 /////
  { 0x00000000,  5, 1 },  // 0000 0
  { 0x08000000,  5, 0 },  // 0000 1
  { 0x10000000,  4, 6 },  // 0001
  { 0x20000000,  3, 2 },  // 001
  { 0x40000000,  2, 5 },  // 01
  { 0x80000000,  2, 4 },  // 10
  { 0xC0000000,  2, 3 },  // 11
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 11 /////
  { 0x00000000,  4, 0 },  // 0000
  { 0x10000000,  4, 1 },  // 0001
  { 0x20000000,  3, 2 },  // 001
  { 0x40000000,  3, 3 },  // 010
  { 0x60000000,  3, 5 },  // 011
  { 0x80000000,  1, 4 },  // 1
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 12 /////
  { 0x00000000,  4, 0 },  // 0000
  { 0x10000000,  4, 1 },  // 0001
  { 0x20000000,  3, 4 },  // 001
  { 0x40000000,  2, 2 },  // 01
  { 0x80000000,  1, 3 },  // 1
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 13 /////
  { 0x00000000,  3, 0 },  // 000
  { 0x20000000,  3, 1 },  // 001
  { 0x40000000,  2, 3 },  // 01
  { 0x80000000,  1, 2 },  // 1
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 14 /////
  { 0x00000000,  2, 0 },  // 00
  { 0x40000000,  2, 1 },  // 01
  { 0x80000000,  1, 2 },  // 1
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 15 /////
  { 0x00000000,  1, 0 },  // 0
  { 0x80000000,  1, 1 },  // 1
  { 0xFFFFFFFF,  0, 0 }  // EOT
} };


int TotalZerosCodes_ChromaDC[3][5][3]={ {
///// 1 /////
  { 0x00000000,  3, 3 },  // 000
  { 0x20000000,  3, 2 },  // 001
  { 0x40000000,  2, 1 },  // 01
  { 0x80000000,  1, 0 },  // 1
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 2 /////
  { 0x00000000,  2, 2 },  // 00
  { 0x40000000,  2, 1 },  // 01
  { 0x80000000,  1, 0 },  // 1
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 3 /////
  { 0x00000000,  1, 1 },  // 0
  { 0x80000000,  1, 0 },  // 1
  { 0xFFFFFFFF,  0, 0 }  // EOT
} };


int RunBeforeCodes[6][17][3]={ {
///// 1 /////
  { 0x00000000,  1, 1 },  // 0
  { 0x80000000,  1, 0 },  // 1
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 2 /////
  { 0x00000000,  2, 2 },  // 00
  { 0x40000000,  2, 1 },  // 01
  { 0x80000000,  1, 0 },  // 1
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 3 /////
  { 0x00000000,  2, 3 },  // 00
  { 0x40000000,  2, 2 },  // 01
  { 0x80000000,  2, 1 },  // 10
  { 0xC0000000,  2, 0 },  // 11
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 4 /////
  { 0x00000000,  3, 4 },  // 000
  { 0x20000000,  3, 3 },  // 001
  { 0x40000000,  2, 2 },  // 01
  { 0x80000000,  2, 1 },  // 10
  { 0xC0000000,  2, 0 },  // 11
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 5 /////
  { 0x00000000,  3, 5 },  // 000
  { 0x20000000,  3, 4 },  // 001
  { 0x40000000,  3, 3 },  // 010
  { 0x60000000,  3, 2 },  // 011
  { 0x80000000,  2, 1 },  // 10
  { 0xC0000000,  2, 0 },  // 11
  { 0xFFFFFFFF,  0, 0 }  // EOT
},{
///// 6 /////
  { 0x00000000,  3, 1 },  // 000
  { 0x20000000,  3, 2 },  // 001
  { 0x40000000,  3, 4 },  // 010
  { 0x60000000,  3, 3 },  // 011
  { 0x80000000,  3, 6 },  // 100
  { 0xA0000000,  3, 5 },  // 101
  { 0xC0000000,  2, 0 },  // 11
  { 0xFFFFFFFF,  0, 0 }  // EOT
} };


void generate_residual_level_tables()
{
	for (int i=0;i<MAX_LEVELCODE_VALUE;i++)
	{
		//There are 7 VLC tables
		for (int j=0;j<7;j++)
		{
			//Maximal prefix value is 15, maximal suffix value is 12
			levelcode_to_outputstream[i][j][0]=30;
		}
	}

	//Simulation of the level decoding (by the norm)
	int level_prefix;
	int suffixLength;
	int levelCode,level_suffix;
	int levelSuffixSize;
	
	for (int i=0;i<16;i++)
	{
		for (int j=0;j<7;j++)
		{
			level_prefix=i;
			suffixLength=j;
			if (level_prefix==14 && suffixLength==0)
			{
				levelSuffixSize=4;
			}
			else if (level_prefix>=15)
			{
				levelSuffixSize=(level_prefix-3);
			}
			else
			{
				levelSuffixSize=suffixLength;
			}

			for (int k=0;k<(1<<levelSuffixSize);k++)
			{
				levelCode=(((level_prefix<15)?level_prefix:15)<<suffixLength);

				if (levelSuffixSize>0 || level_prefix>=14)
				{
					level_suffix=k;
					levelCode+=level_suffix;
				}
				else
				{
						level_suffix=0;
				}

				if (level_prefix>=15 && suffixLength==0)
				{
					levelCode += 15;
				}

				inputstream_to_levelcode[i][j][k]=levelCode;
				if (levelcode_to_outputstream[levelCode][j][0]>=i+levelSuffixSize)
				{
					levelcode_to_outputstream[levelCode][j][0]=i+levelSuffixSize;
					levelcode_to_outputstream[levelCode][j][1]=i;
					levelcode_to_outputstream[levelCode][j][2]=levelSuffixSize;
					levelcode_to_outputstream[levelCode][j][3]=k;
				}
			}
		}
	}
}

//CAVLC table definition, generation, management and initialization
//These tables are used in residual coding/decoding

int cavlc_table_decode(struct cavlc_table *table)
{
  unsigned int code=peekRawBits(24)<<8;
  int min=0, max=table->count;
  while(max-min>1)
  {
    int mid=(min+max)>>1;
    if(code>=table->items[mid].code)
	{
		min=mid;
	}
	else
	{
		max=mid;
	}
  }
  skipRawBits(table->items[min].bits);
  return table->items[min].data;
}

struct cavlc_table *init_cavlc_table(int *items)
{
  struct cavlc_table *res=new cavlc_table;
  struct cavlc_table_item *tableContent;
  int *pos;
  int count=0;
  for(pos=items; (*pos)!=0xFFFFFFFF; pos+=3) ++count;

  pos=items;

  tableContent = new cavlc_table_item[count];
  
  for (int i=0;i<count;i++)
  {
	  tableContent[i].code=*(pos);
	  tableContent[i].bits=*(pos+1);
	  tableContent[i].data=*(pos+2);
	  pos+=3;
  }

  res->items=tableContent;
  res->count=count;
  return res;
}

void init_cavlc_tables()
{
 
  for(int i=0; i<4; ++i)
  {
    CoeffTokenCodeTable[i]=init_cavlc_table(&CoeffTokenCodes[i][0][0]);
  }
  
  CoeffTokenCodeTable_ChromaDC=init_cavlc_table(&CoeffTokenCodes_ChromaDC[0][0]);
  
  for(int i=0; i<15; ++i)
  {
    TotalZerosCodeTable_4x4[i]=init_cavlc_table(&TotalZerosCodes_4x4[i][0][0]);
  }

  for(int i=0; i<3; ++i)
  {
    TotalZerosCodeTable_ChromaDC[i]=init_cavlc_table(&TotalZerosCodes_ChromaDC[i][0][0]);
  }

  for(int i=0; i<6; ++i)
  {
    RunBeforeCodeTable[i]=init_cavlc_table(&RunBeforeCodes[i][0][0]);
  }
}